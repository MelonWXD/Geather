package com.dongua.geather.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.dongua.geather.bean.weather.Suggestion;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SUGGESTION".
*/
public class SuggestionDao extends AbstractDao<Suggestion, Long> {

    public static final String TABLENAME = "SUGGESTION";

    /**
     * Properties of entity Suggestion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property City_id = new Property(1, String.class, "city_id", false, "CITY_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Brief = new Property(3, String.class, "brief", false, "BRIEF");
        public final static Property Details = new Property(4, String.class, "details", false, "DETAILS");
    }

    private Query<Suggestion> weather_SuggestionsQuery;

    public SuggestionDao(DaoConfig config) {
        super(config);
    }
    
    public SuggestionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUGGESTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CITY_ID\" TEXT," + // 1: city_id
                "\"NAME\" TEXT," + // 2: name
                "\"BRIEF\" TEXT," + // 3: brief
                "\"DETAILS\" TEXT);"); // 4: details
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUGGESTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Suggestion entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String city_id = entity.getCity_id();
        if (city_id != null) {
            stmt.bindString(2, city_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String brief = entity.getBrief();
        if (brief != null) {
            stmt.bindString(4, brief);
        }
 
        String details = entity.getDetails();
        if (details != null) {
            stmt.bindString(5, details);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Suggestion entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String city_id = entity.getCity_id();
        if (city_id != null) {
            stmt.bindString(2, city_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String brief = entity.getBrief();
        if (brief != null) {
            stmt.bindString(4, brief);
        }
 
        String details = entity.getDetails();
        if (details != null) {
            stmt.bindString(5, details);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Suggestion readEntity(Cursor cursor, int offset) {
        Suggestion entity = new Suggestion( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // city_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // brief
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // details
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Suggestion entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCity_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBrief(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDetails(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Suggestion entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Suggestion entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Suggestion entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "suggestions" to-many relationship of Weather. */
    public List<Suggestion> _queryWeather_Suggestions(String city_id) {
        synchronized (this) {
            if (weather_SuggestionsQuery == null) {
                QueryBuilder<Suggestion> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.City_id.eq(null));
                weather_SuggestionsQuery = queryBuilder.build();
            }
        }
        Query<Suggestion> query = weather_SuggestionsQuery.forCurrentThread();
        query.setParameter(0, city_id);
        return query.list();
    }

}
